name: Frostsnap CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  BRIDGE_FILES: |
    ./frostsnapp/native/src/bridge_generated.web.rs
    ./frostsnapp/native/src/bridge_generated.io.rs
    ./frostsnapp/native/src/bridge_generated.rs
    ./frostsnapp/macos/Runner/bridge_generated.h
    ./frostsnapp/lib/bridge_generated.io.dart
    ./frostsnapp/lib/bridge_generated.dart
    ./frostsnapp/lib/bridge_generated.web.dart
    ./frostsnapp/ios/Runner/bridge_generated.h
    ./frostsnapp/lib/bridge_definitions.freezed.dart
    ./frostsnapp/lib/bridge_definitions.dart

jobs:
  build-rust-deps:
    name: Build Rust Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Restore cargo cache
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('./Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: riscv32imc-unknown-none-elf,aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android
          components: rustfmt, clippy

      - uses: taiki-e/install-action@just
      - run: just frostsnapp/install-rust-deps

  device:
    name: Build Device Firmware
    needs: build-rust-deps
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: ["v2"]
    defaults:
      run:
        working-directory: ./device
    steps:
      - uses: actions/checkout@v4

      # RISC-V toolchain cache
      - uses: actions/cache@v4
        id: cache-riscv
        with:
          path: device/riscv
          key: ${{ runner.os }}-riscv-toolchain-2024.09.03-v1

      - name: Setup | RISCV GCC
        if: steps.cache-riscv.outputs.cache-hit != 'true'
        run: |
          wget -nv https://github.com/riscv-collab/riscv-gnu-toolchain/releases/download/2024.09.03/riscv32-elf-ubuntu-22.04-gcc-nightly-2024.09.03-nightly.tar.gz
          tar -zxf riscv32-elf-ubuntu-22.04-gcc-nightly-2024.09.03-nightly.tar.gz

      - name: Add RISC-V GCC to PATH
        run: echo "PATH=$PATH:${GITHUB_WORKSPACE}/device/riscv/bin" >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: riscv32imc-unknown-none-elf

      # Restore cargo cache
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('./Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Device-specific target cache
      - uses: actions/cache@v4
        with:
          path: target/riscv32imc-unknown-none-elf/
          key: ${{ runner.os }}-device-target-${{ hashFiles('device/Cargo.toml', './Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-device-target-

      - uses: taiki-e/install-action@just
      - run: just lint-device --release
      - run: just build-device ${{ matrix.board }}
      - uses: actions/upload-artifact@v4
        with:
          name: frostsnap-${{ github.sha }}.elf
          path: target/riscv32imc-unknown-none-elf/release/v2
          if-no-files-found: error

  generate-bridge-files:
    name: Generate Flutter Rust Bridge FFI
    needs: build-rust-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Restore pub cache
      - uses: actions/cache@v4
        id: cache-pub
        with:
          path: ~/.pub-cache/
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('frostsnapp/pubspec.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-pub-cache-

      # Restore cargo cache
      - uses: actions/cache@v4
        id: cache-cargo
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('./Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Restore bridge files cache
      - uses: actions/cache@v4
        id: cache-bridge
        with:
          path: ${{ env.BRIDGE_FILES }}
          key: bridge-files-${{ hashFiles('frostsnapp/native/src/**/*') }}
          restore-keys: |
            bridge-files-

      - name: Skip FFI gen if all caches hit
        id: skip-ffigen
        run: |
          if [[ '${{ steps.cache-pub.outputs.cache-hit }}' == 'true' ]] && \
             [[ '${{ steps.cache-cargo.outputs.cache-hit }}' == 'true' ]] && \
             [[ '${{ steps.cache-bridge.outputs.cache-hit }}' == 'true' ]]; then
            echo "All caches hit, will not regenerate FFI."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "One of the above caches changed, will generate FFI."
            echo "skip=false" >> $GITHUB_ENV
          fi

      - uses: dtolnay/rust-toolchain@stable

      - uses: subosito/flutter-action@v2
        if: env.skip != 'true'
        with:
          channel: stable
          cache: true

      - uses: taiki-e/install-action@just

      # Skip the `just gen` step if the skip flag is set
      - name: Generate FFI
        if: env.skip != 'true'
        run: |
          just frostsnapp/install-rust-deps
          just frostsnapp/install-flutter-deps
          just gen

  non-device:
    name: Build Non-Device
    needs: [generate-bridge-files, build-rust-deps]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Restore cargo cache
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('./Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Non-device specific target cache
      - uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-non-device-target-${{ hashFiles('non-device/Cargo.toml', './Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-non-device-target-

      # Restore bridge files
      - uses: actions/cache@v4
        with:
          path: ${{ env.BRIDGE_FILES }}
          key: bridge-files-${{ hashFiles('frostsnapp/native/src/**/*') }}
          restore-keys: |
            bridge-files-

      - uses: taiki-e/install-action@just
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - run: just lint-non-device --release
      - run: just test --release --all-features

  app-build:
    needs: ["generate-bridge-files", "device", "build-rust-deps"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_command: apk
            artifact_name: Frostsnapp-${{ github.sha }}.apk
            artifact_path: frostsnapp/build/app/outputs/apk/release/app-release.apk
            name: Build Android APK
          - os: ubuntu-latest
            build_command: linux
            artifact_name: Frostsnapp-${{ github.sha }}-linux-x64
            artifact_path: frostsnapp/build/linux/x64/release/bundle
            name: Build Linux App
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # Restore cargo cache
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('./Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # App-specific target cache
      - uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-app-target-${{ hashFiles('frostsnapp/Cargo.toml', './Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-app-target-

      # Restore pub cache
      - uses: actions/cache@v4
        with:
          path: ~/.pub-cache/
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('frostsnapp/pubspec.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-pub-cache-

      # Restore bridge files
      - uses: actions/cache@v4
        with:
          path: ${{ env.BRIDGE_FILES }}
          key: bridge-files-${{ hashFiles('frostsnapp/native/src/**/*') }}

      # Setup Java and NDK
      - name: Setup (Android)
        if: matrix.build_command == 'apk'
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 18
          cache: gradle

      - uses: nttld/setup-ndk@v1
        if: matrix.build_command == 'apk'
        with:
          ndk-version: r25c

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - uses: taiki-e/install-action@just
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Setup (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.build_command == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libstdc++-12-dev libgtk-3-0 libgtk-3-dev

      - uses: actions/download-artifact@v4
        with:
          name: frostsnap-${{ github.sha }}.elf
          path: target/riscv32imc-unknown-none-elf/release/

      - run: just frostsnapp/install-flutter-deps
      - run: just frostsnapp/install-rust-deps

      - name: Build App (${{ matrix.build_command }})
        run: just frostsnapp/build ${{ matrix.build_command }} --release

      - name: Build App Bundle (Android)
        if: matrix.build_command == 'apk'
        run: just frostsnapp/build appbundle --release

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

      - name: Upload App Bundle (Android)
        if: matrix.build_command == 'apk'
        uses: actions/upload-artifact@v4
        with:
          name: frostsnapp-${{ github.sha }}.aab
          path: frostsnapp/build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: error

  app-image:
    name: Package AppImage
    needs: app-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: Frostsnapp-${{ github.sha }}-linux-x64
          path: frostsnapp/build/linux/x64/release/bundle

      - run: sudo pip3 install --upgrade appimage-builder

      - uses: taiki-e/install-action@just
      - run: just frostsnapp/build-appimage --skip-tests

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: Frostsnapp-${{ github.sha }}-x64.AppImage
          path: frostsnapp/Frostsnapp-latest-x86_64.AppImage
          if-no-files-found: error

  flutter-analyze:
    name: Flutter Analyze
    needs: generate-bridge-files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Restore pub cache
      - uses: actions/cache@v4
        with:
          path: ~/.pub-cache/
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('frostsnapp/pubspec.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-pub-cache-

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # Restore bridge files
      - uses: actions/cache@v4
        with:
          path: ${{ env.BRIDGE_FILES }}
          key: bridge-files-${{ hashFiles('frostsnapp/native/src/**/*') }}
          restore-keys: |
            bridge-files-

      - uses: taiki-e/install-action@just
      - run: just frostsnapp/install-flutter-deps
      - run: just lint-app
