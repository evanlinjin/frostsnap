// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_ArcMutexFrostsnapWallet(ArcMutexFrostsnapWallet raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ArcMutexRusqliteConnection(ArcMutexRusqliteConnection raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ArcMutexVecPortDesc(ArcMutexVecPortDesc raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ArcRTransaction(ArcRTransaction raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ArcWalletStreams(ArcWalletStreams raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_BitcoinPsbt(BitcoinPsbt raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ChainClient(ChainClient raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_FfiCoordinator(FfiCoordinator raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_FfiQrEncoder(FfiQrEncoder raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_FfiQrReader(FfiQrReader raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_FrostsnapCoreBitcoinTransactionTransactionTemplate(
      FrostsnapCoreBitcoinTransactionTransactionTemplate raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_FrostsnapCoreCoordinatorCoordinatorFrostKey(
      FrostsnapCoreCoordinatorCoordinatorFrostKey raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_HashMapRBitcoinNetworkChainClient(
      HashMapRBitcoinNetworkChainClient raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MaybeSinkDeveloperSettings(MaybeSinkDeveloperSettings raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MaybeSinkElectrumSettings(MaybeSinkElectrumSettings raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MaybeSinkWalletSettings(MaybeSinkWalletSettings raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MutexHashMapRBitcoinNetworkWallet(
      MutexHashMapRBitcoinNetworkWallet raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MutexPersistedRSettings(MutexPersistedRSettings raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PathBuf(PathBuf raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortBytesToReadSender(PortBytesToReadSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortOpenSender(PortOpenSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortReadSender(PortReadSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortWriteSender(PortWriteSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_RBitcoinNetwork(RBitcoinNetwork raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_RTransaction(RTransaction raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<String> api2wire_StringList(List<String> raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_bitcoin_network(BitcoinNetwork raw) {
    return [api2wire_RBitcoinNetwork(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_box_autoadd_bitcoin_network(BitcoinNetwork raw) {
    return api2wire_bitcoin_network(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_confirmation_time(ConfirmationTime raw) {
    return api2wire_confirmation_time(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_connected_device(ConnectedDevice raw) {
    return api2wire_connected_device(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_coordinator(Coordinator raw) {
    return api2wire_coordinator(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_device_id(DeviceId raw) {
    return api2wire_device_id(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_device_list_state(DeviceListState raw) {
    return api2wire_device_list_state(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ffi_serial(FfiSerial raw) {
    return api2wire_ffi_serial(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_frost_key(FrostKey raw) {
    return api2wire_frost_key(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_key_id(KeyId raw) {
    return api2wire_key_id(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_bytes_to_read(PortBytesToRead raw) {
    return api2wire_port_bytes_to_read(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_open(PortOpen raw) {
    return api2wire_port_open(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_read(PortRead raw) {
    return api2wire_port_read(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_write(PortWrite raw) {
    return api2wire_port_write(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_psbt(Psbt raw) {
    return api2wire_psbt(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_qr_encoder(QrEncoder raw) {
    return api2wire_qr_encoder(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_qr_reader(QrReader raw) {
    return api2wire_qr_reader(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_settings(Settings raw) {
    return api2wire_settings(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_signed_tx(SignedTx raw) {
    return api2wire_signed_tx(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_transaction(Transaction raw) {
    return api2wire_transaction(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_unsigned_tx(UnsignedTx raw) {
    return api2wire_unsigned_tx(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_wallet(Wallet raw) {
    return api2wire_wallet(raw);
  }

  @protected
  List<dynamic> api2wire_confirmation_time(ConfirmationTime raw) {
    return [api2wire_u32(raw.height), api2wire_u64(raw.time)];
  }

  @protected
  List<dynamic> api2wire_connected_device(ConnectedDevice raw) {
    return [
      api2wire_opt_String(raw.name),
      api2wire_String(raw.firmwareDigest),
      api2wire_String(raw.latestDigest),
      api2wire_device_id(raw.id)
    ];
  }

  @protected
  List<dynamic> api2wire_coordinator(Coordinator raw) {
    return [api2wire_FfiCoordinator(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_device_id(DeviceId raw) {
    return [api2wire_u8_array_33(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_device_list_state(DeviceListState raw) {
    return [
      api2wire_list_connected_device(raw.devices),
      api2wire_usize(raw.stateId)
    ];
  }

  @protected
  List<dynamic> api2wire_encoded_signature(EncodedSignature raw) {
    return [api2wire_u8_array_64(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_ffi_serial(FfiSerial raw) {
    return [api2wire_ArcMutexVecPortDesc(raw.availablePorts)];
  }

  @protected
  List<dynamic> api2wire_frost_key(FrostKey raw) {
    return [api2wire_FrostsnapCoreCoordinatorCoordinatorFrostKey(raw.field0)];
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> api2wire_key_id(KeyId raw) {
    return [api2wire_u8_array_33(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_list_connected_device(List<ConnectedDevice> raw) {
    return raw.map(api2wire_connected_device).toList();
  }

  @protected
  List<dynamic> api2wire_list_device_id(List<DeviceId> raw) {
    return raw.map(api2wire_device_id).toList();
  }

  @protected
  List<dynamic> api2wire_list_encoded_signature(List<EncodedSignature> raw) {
    return raw.map(api2wire_encoded_signature).toList();
  }

  @protected
  List<dynamic> api2wire_list_port_desc(List<PortDesc> raw) {
    return raw.map(api2wire_port_desc).toList();
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_confirmation_time(
      ConfirmationTime? raw) {
    return raw == null ? null : api2wire_box_autoadd_confirmation_time(raw);
  }

  @protected
  List<dynamic> api2wire_port_bytes_to_read(PortBytesToRead raw) {
    return [api2wire_String(raw.id), api2wire_PortBytesToReadSender(raw.ready)];
  }

  @protected
  List<dynamic> api2wire_port_desc(PortDesc raw) {
    return [
      api2wire_String(raw.id),
      api2wire_u16(raw.vid),
      api2wire_u16(raw.pid)
    ];
  }

  @protected
  List<dynamic> api2wire_port_open(PortOpen raw) {
    return [
      api2wire_String(raw.id),
      api2wire_u32(raw.baudRate),
      api2wire_PortOpenSender(raw.ready)
    ];
  }

  @protected
  List<dynamic> api2wire_port_read(PortRead raw) {
    return [
      api2wire_String(raw.id),
      api2wire_usize(raw.len),
      api2wire_PortReadSender(raw.ready)
    ];
  }

  @protected
  List<dynamic> api2wire_port_write(PortWrite raw) {
    return [
      api2wire_String(raw.id),
      api2wire_uint_8_list(raw.bytes),
      api2wire_PortWriteSender(raw.ready)
    ];
  }

  @protected
  List<dynamic> api2wire_psbt(Psbt raw) {
    return [api2wire_BitcoinPsbt(raw.inner)];
  }

  @protected
  List<dynamic> api2wire_qr_encoder(QrEncoder raw) {
    return [api2wire_FfiQrEncoder(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_qr_reader(QrReader raw) {
    return [api2wire_FfiQrReader(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_settings(Settings raw) {
    return [
      api2wire_MutexPersistedRSettings(raw.settings),
      api2wire_ArcMutexRusqliteConnection(raw.db),
      api2wire_HashMapRBitcoinNetworkChainClient(raw.chainClients),
      api2wire_PathBuf(raw.appDirectory),
      api2wire_MutexHashMapRBitcoinNetworkWallet(raw.loadedWallets),
      api2wire_MaybeSinkWalletSettings(raw.walletSettingsStream),
      api2wire_MaybeSinkDeveloperSettings(raw.developerSettingsStream),
      api2wire_MaybeSinkElectrumSettings(raw.electrumSettingsStream)
    ];
  }

  @protected
  List<dynamic> api2wire_signed_tx(SignedTx raw) {
    return [
      api2wire_RTransaction(raw.signedTx),
      api2wire_unsigned_tx(raw.unsignedTx)
    ];
  }

  @protected
  List<dynamic> api2wire_transaction(Transaction raw) {
    return [
      api2wire_i64(raw.netValue),
      api2wire_ArcRTransaction(raw.inner),
      api2wire_opt_box_autoadd_confirmation_time(raw.confirmationTime)
    ];
  }

  @protected
  Object api2wire_u64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List api2wire_u8_array_33(U8Array33 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List api2wire_u8_array_64(U8Array64 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_unsigned_tx(UnsignedTx raw) {
    return [
      api2wire_FrostsnapCoreBitcoinTransactionTransactionTemplate(
          raw.templateTx)
    ];
  }

  @protected
  List<dynamic> api2wire_wallet(Wallet raw) {
    return [
      api2wire_ArcMutexFrostsnapWallet(raw.inner),
      api2wire_ArcWalletStreams(raw.walletStreams),
      api2wire_ChainClient(raw.chainSync),
      api2wire_bitcoin_network(raw.network)
    ];
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _ArcMutexFrostsnapWalletFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcMutexFrostsnapWallet);
  Finalizer<PlatformPointer> get ArcMutexFrostsnapWalletFinalizer =>
      _ArcMutexFrostsnapWalletFinalizer;
  late final Finalizer<PlatformPointer> _ArcMutexRusqliteConnectionFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcMutexRusqliteConnection);
  Finalizer<PlatformPointer> get ArcMutexRusqliteConnectionFinalizer =>
      _ArcMutexRusqliteConnectionFinalizer;
  late final Finalizer<PlatformPointer> _ArcMutexVecPortDescFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcMutexVecPortDesc);
  Finalizer<PlatformPointer> get ArcMutexVecPortDescFinalizer =>
      _ArcMutexVecPortDescFinalizer;
  late final Finalizer<PlatformPointer> _ArcRTransactionFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcRTransaction);
  Finalizer<PlatformPointer> get ArcRTransactionFinalizer =>
      _ArcRTransactionFinalizer;
  late final Finalizer<PlatformPointer> _ArcWalletStreamsFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcWalletStreams);
  Finalizer<PlatformPointer> get ArcWalletStreamsFinalizer =>
      _ArcWalletStreamsFinalizer;
  late final Finalizer<PlatformPointer> _BitcoinPsbtFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_BitcoinPsbt);
  Finalizer<PlatformPointer> get BitcoinPsbtFinalizer => _BitcoinPsbtFinalizer;
  late final Finalizer<PlatformPointer> _ChainClientFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ChainClient);
  Finalizer<PlatformPointer> get ChainClientFinalizer => _ChainClientFinalizer;
  late final Finalizer<PlatformPointer> _FfiCoordinatorFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_FfiCoordinator);
  Finalizer<PlatformPointer> get FfiCoordinatorFinalizer =>
      _FfiCoordinatorFinalizer;
  late final Finalizer<PlatformPointer> _FfiQrEncoderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_FfiQrEncoder);
  Finalizer<PlatformPointer> get FfiQrEncoderFinalizer =>
      _FfiQrEncoderFinalizer;
  late final Finalizer<PlatformPointer> _FfiQrReaderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_FfiQrReader);
  Finalizer<PlatformPointer> get FfiQrReaderFinalizer => _FfiQrReaderFinalizer;
  late final Finalizer<PlatformPointer>
      _FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer =
      Finalizer<PlatformPointer>(
          inner.drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate);
  Finalizer<PlatformPointer>
      get FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer =>
          _FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer;
  late final Finalizer<PlatformPointer>
      _FrostsnapCoreCoordinatorCoordinatorFrostKeyFinalizer =
      Finalizer<PlatformPointer>(
          inner.drop_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey);
  Finalizer<PlatformPointer>
      get FrostsnapCoreCoordinatorCoordinatorFrostKeyFinalizer =>
          _FrostsnapCoreCoordinatorCoordinatorFrostKeyFinalizer;
  late final Finalizer<PlatformPointer>
      _HashMapRBitcoinNetworkChainClientFinalizer = Finalizer<PlatformPointer>(
          inner.drop_opaque_HashMapRBitcoinNetworkChainClient);
  Finalizer<PlatformPointer> get HashMapRBitcoinNetworkChainClientFinalizer =>
      _HashMapRBitcoinNetworkChainClientFinalizer;
  late final Finalizer<PlatformPointer> _MaybeSinkDeveloperSettingsFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MaybeSinkDeveloperSettings);
  Finalizer<PlatformPointer> get MaybeSinkDeveloperSettingsFinalizer =>
      _MaybeSinkDeveloperSettingsFinalizer;
  late final Finalizer<PlatformPointer> _MaybeSinkElectrumSettingsFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MaybeSinkElectrumSettings);
  Finalizer<PlatformPointer> get MaybeSinkElectrumSettingsFinalizer =>
      _MaybeSinkElectrumSettingsFinalizer;
  late final Finalizer<PlatformPointer> _MaybeSinkWalletSettingsFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MaybeSinkWalletSettings);
  Finalizer<PlatformPointer> get MaybeSinkWalletSettingsFinalizer =>
      _MaybeSinkWalletSettingsFinalizer;
  late final Finalizer<PlatformPointer>
      _MutexHashMapRBitcoinNetworkWalletFinalizer = Finalizer<PlatformPointer>(
          inner.drop_opaque_MutexHashMapRBitcoinNetworkWallet);
  Finalizer<PlatformPointer> get MutexHashMapRBitcoinNetworkWalletFinalizer =>
      _MutexHashMapRBitcoinNetworkWalletFinalizer;
  late final Finalizer<PlatformPointer> _MutexPersistedRSettingsFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MutexPersistedRSettings);
  Finalizer<PlatformPointer> get MutexPersistedRSettingsFinalizer =>
      _MutexPersistedRSettingsFinalizer;
  late final Finalizer<PlatformPointer> _PathBufFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PathBuf);
  Finalizer<PlatformPointer> get PathBufFinalizer => _PathBufFinalizer;
  late final Finalizer<PlatformPointer> _PortBytesToReadSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortBytesToReadSender);
  Finalizer<PlatformPointer> get PortBytesToReadSenderFinalizer =>
      _PortBytesToReadSenderFinalizer;
  late final Finalizer<PlatformPointer> _PortOpenSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortOpenSender);
  Finalizer<PlatformPointer> get PortOpenSenderFinalizer =>
      _PortOpenSenderFinalizer;
  late final Finalizer<PlatformPointer> _PortReadSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortReadSender);
  Finalizer<PlatformPointer> get PortReadSenderFinalizer =>
      _PortReadSenderFinalizer;
  late final Finalizer<PlatformPointer> _PortWriteSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortWriteSender);
  Finalizer<PlatformPointer> get PortWriteSenderFinalizer =>
      _PortWriteSenderFinalizer;
  late final Finalizer<PlatformPointer> _RBitcoinNetworkFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_RBitcoinNetwork);
  Finalizer<PlatformPointer> get RBitcoinNetworkFinalizer =>
      _RBitcoinNetworkFinalizer;
  late final Finalizer<PlatformPointer> _RTransactionFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_RTransaction);
  Finalizer<PlatformPointer> get RTransactionFinalizer =>
      _RTransactionFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_sub_port_events(NativePortType port_);

  external dynamic /* void */ wire_sub_device_events(NativePortType port_);

  external dynamic /* void */ wire_log(int level, String message);

  external dynamic /* void */ wire_turn_stderr_logging_on(
      NativePortType port_, int level);

  external dynamic /* void */ wire_turn_logcat_logging_on(
      NativePortType port_, int level);

  external dynamic /* List<dynamic>? */ wire_device_at_index(int index);

  external dynamic /* List<dynamic> */ wire_device_list_state();

  external dynamic /* List<dynamic>? */ wire_get_connected_device(
      List<dynamic> id);

  external dynamic /* void */ wire_load(NativePortType port_, String app_dir);

  external dynamic /* void */ wire_load_host_handles_serial(
      NativePortType port_, String app_dir);

  external dynamic /* void */ wire_echo_key_id(
      NativePortType port_, List<dynamic> key_id);

  external dynamic /* List<dynamic> */ wire_psbt_bytes_to_psbt(
      Uint8List psbt_bytes);

  external dynamic /* void */ wire_new_qr_reader(NativePortType port_);

  external dynamic /* void */ wire_new_qr_encoder(
      NativePortType port_, Uint8List bytes);

  external dynamic /* String */ wire_txid__method__Transaction(
      List<dynamic> that);

  external dynamic /* bool */ wire_ready__method__ConnectedDevice(
      List<dynamic> that);

  external dynamic /* bool */
      wire_needs_firmware_upgrade__method__ConnectedDevice(List<dynamic> that);

  external dynamic /* int */ wire_threshold__method__FrostKey(
      List<dynamic> that);

  external dynamic /* List<dynamic> */ wire_id__method__FrostKey(
      List<dynamic> that);

  external dynamic /* String */ wire_key_name__method__FrostKey(
      List<dynamic> that);

  external dynamic /* List<dynamic> */ wire_devices__method__FrostKey(
      List<dynamic> that);

  external dynamic /* Uint8List */ wire_polynomial_identifier__method__FrostKey(
      List<dynamic> that);

  external dynamic /* void */ wire_satisfy__method__PortOpen(
      NativePortType port_, List<dynamic> that, String? err);

  external dynamic /* void */ wire_satisfy__method__PortRead(
      NativePortType port_, List<dynamic> that, Uint8List bytes, String? err);

  external dynamic /* void */ wire_satisfy__method__PortWrite(
      NativePortType port_, List<dynamic> that, String? err);

  external dynamic /* void */ wire_satisfy__method__PortBytesToRead(
      NativePortType port_, List<dynamic> that, int bytes_to_read);

  external dynamic /* List<dynamic>? */
      wire_get_device__method__DeviceListState(
          List<dynamic> that, List<dynamic> id);

  external dynamic /* void */ wire_sub_tx_state__method__Wallet(
      NativePortType port_, List<dynamic> that, List<dynamic> key_id);

  external dynamic /* List<dynamic> */ wire_tx_state__method__Wallet(
      List<dynamic> that, List<dynamic> key_id);

  external dynamic /* void */ wire_sync_txids__method__Wallet(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> key_id,
      List<String> txids);

  external dynamic /* void */ wire_sync__method__Wallet(
      NativePortType port_, List<dynamic> that, List<dynamic> key_id);

  external dynamic /* void */ wire_next_address__method__Wallet(
      NativePortType port_, List<dynamic> that, List<dynamic> key_id);

  external dynamic /* List<dynamic> */ wire_addresses_state__method__Wallet(
      List<dynamic> that, List<dynamic> key_id);

  external dynamic /* void */ wire_send_to__method__Wallet(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> key_id,
      String to_address,
      Object value,
      double feerate);

  external dynamic /* void */ wire_broadcast_tx__method__Wallet(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> key_id,
      List<dynamic> tx);

  external dynamic /* List<dynamic> */ wire_psbt_to_unsigned_tx__method__Wallet(
      List<dynamic> that, List<dynamic> psbt, List<dynamic> key_id);

  external dynamic /* List<dynamic> */
      wire_signet__static_method__BitcoinNetwork();

  external dynamic /* List<dynamic> */
      wire_mainnet__static_method__BitcoinNetwork();

  external dynamic /* List<dynamic>? */
      wire_from_string__static_method__BitcoinNetwork(String string);

  external dynamic /* List<dynamic> */
      wire_supported_networks__static_method__BitcoinNetwork();

  external dynamic /* String */ wire_name__method__BitcoinNetwork(
      List<dynamic> that);

  external dynamic /* bool */ wire_is_mainnet__method__BitcoinNetwork(
      List<dynamic> that);

  external dynamic /* String */ wire_descriptor_for_key__method__BitcoinNetwork(
      List<dynamic> that, List<dynamic> key_id);

  external dynamic /* String? */ wire_validate_amount__method__BitcoinNetwork(
      List<dynamic> that, String address, Object value);

  external dynamic /* String? */
      wire_validate_destination_address__method__BitcoinNetwork(
          List<dynamic> that, String address);

  external dynamic /* String */
      wire_default_electrum_server__method__BitcoinNetwork(List<dynamic> that);

  external dynamic /* void */ wire_set_available_ports__method__FfiSerial(
      NativePortType port_, List<dynamic> that, List<dynamic> ports);

  external dynamic /* void */ wire_start_thread__method__Coordinator(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_update_name_preview__method__Coordinator(
      NativePortType port_, List<dynamic> that, List<dynamic> id, String name);

  external dynamic /* void */ wire_finish_naming__method__Coordinator(
      NativePortType port_, List<dynamic> that, List<dynamic> id, String name);

  external dynamic /* void */ wire_send_cancel__method__Coordinator(
      NativePortType port_, List<dynamic> that, List<dynamic> id);

  external dynamic /* void */ wire_display_backup__method__Coordinator(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> id,
      List<dynamic> key_id);

  external dynamic /* List<dynamic> */ wire_key_state__method__Coordinator(
      List<dynamic> that);

  external dynamic /* void */ wire_sub_key_events__method__Coordinator(
      NativePortType port_, List<dynamic> that);

  external dynamic /* List<dynamic>? */ wire_get_key__method__Coordinator(
      List<dynamic> that, List<dynamic> key_id);

  external dynamic /* String? */ wire_get_key_name__method__Coordinator(
      List<dynamic> that, List<dynamic> key_id);

  external dynamic /* List<dynamic> */
      wire_keys_for_device__method__Coordinator(
          List<dynamic> that, List<dynamic> device_id);

  external dynamic /* void */ wire_start_signing__method__Coordinator(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> key_id,
      List<dynamic> devices,
      String message);

  external dynamic /* void */ wire_start_signing_tx__method__Coordinator(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> key_id,
      List<dynamic> unsigned_tx,
      List<dynamic> devices);

  external dynamic /* int */ wire_nonces_available__method__Coordinator(
      List<dynamic> that, List<dynamic> id);

  external dynamic /* Object */ wire_current_nonce__method__Coordinator(
      List<dynamic> that, List<dynamic> id);

  external dynamic /* void */ wire_generate_new_key__method__Coordinator(
      NativePortType port_,
      List<dynamic> that,
      int threshold,
      List<dynamic> devices,
      String key_name);

  external dynamic /* List<dynamic>? */
      wire_persisted_sign_session_description__method__Coordinator(
          List<dynamic> that, List<dynamic> key_id);

  external dynamic /* void */
      wire_try_restore_signing_session__method__Coordinator(
          NativePortType port_, List<dynamic> that, List<dynamic> key_id);

  external dynamic /* void */ wire_start_firmware_upgrade__method__Coordinator(
      NativePortType port_, List<dynamic> that);

  external dynamic /* String */
      wire_upgrade_firmware_digest__method__Coordinator(List<dynamic> that);

  external dynamic /* void */ wire_cancel_protocol__method__Coordinator(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */
      wire_enter_firmware_upgrade_mode__method__Coordinator(
          NativePortType port_, List<dynamic> that);

  external dynamic /* String? */ wire_get_device_name__method__Coordinator(
      List<dynamic> that, List<dynamic> id);

  external dynamic /* void */ wire_final_keygen_ack__method__Coordinator(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_check_share_on_device__method__Coordinator(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> device_id,
      List<dynamic> key_id);

  external dynamic /* List<dynamic> */ wire_effect__method__SignedTx(
      List<dynamic> that, List<dynamic> key_id, List<dynamic> network);

  external dynamic /* void */
      wire_attach_signatures_to_psbt__method__UnsignedTx(NativePortType port_,
          List<dynamic> that, List<dynamic> signatures, List<dynamic> psbt);

  external dynamic /* void */ wire_complete__method__UnsignedTx(
      NativePortType port_, List<dynamic> that, List<dynamic> signatures);

  external dynamic /* List<dynamic> */ wire_effect__method__UnsignedTx(
      List<dynamic> that, List<dynamic> key_id, List<dynamic> network);

  external dynamic /* Uint8List */ wire_to_bytes__method__Psbt(
      List<dynamic> that);

  external dynamic /* void */ wire_decode_from_bytes__method__QrReader(
      NativePortType port_, List<dynamic> that, Uint8List bytes);

  external dynamic /* String */ wire_next__method__QrEncoder(
      List<dynamic> that);

  external dynamic /* void */ wire_sub_developer_settings__method__Settings(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_sub_electrum_settings__method__Settings(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_sub_wallet_settings__method__Settings(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_load_wallet__method__Settings(
      NativePortType port_, List<dynamic> that, List<dynamic> network);

  external dynamic /* void */ wire_set_wallet_network__method__Settings(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> key_id,
      List<dynamic> network);

  external dynamic /* void */ wire_set_developer_mode__method__Settings(
      NativePortType port_, List<dynamic> that, bool value);

  external dynamic /* void */
      wire_check_and_set_electrum_server__method__Settings(NativePortType port_,
          List<dynamic> that, List<dynamic> network, String url);

  external dynamic /* void */ wire_subscribe_chain_status__method__Settings(
      NativePortType port_, List<dynamic> that, List<dynamic> network);

  external dynamic /*  */ drop_opaque_ArcMutexFrostsnapWallet(ptr);

  external int /* *const c_void */ share_opaque_ArcMutexFrostsnapWallet(ptr);

  external dynamic /*  */ drop_opaque_ArcMutexRusqliteConnection(ptr);

  external int /* *const c_void */ share_opaque_ArcMutexRusqliteConnection(ptr);

  external dynamic /*  */ drop_opaque_ArcMutexVecPortDesc(ptr);

  external int /* *const c_void */ share_opaque_ArcMutexVecPortDesc(ptr);

  external dynamic /*  */ drop_opaque_ArcRTransaction(ptr);

  external int /* *const c_void */ share_opaque_ArcRTransaction(ptr);

  external dynamic /*  */ drop_opaque_ArcWalletStreams(ptr);

  external int /* *const c_void */ share_opaque_ArcWalletStreams(ptr);

  external dynamic /*  */ drop_opaque_BitcoinPsbt(ptr);

  external int /* *const c_void */ share_opaque_BitcoinPsbt(ptr);

  external dynamic /*  */ drop_opaque_ChainClient(ptr);

  external int /* *const c_void */ share_opaque_ChainClient(ptr);

  external dynamic /*  */ drop_opaque_FfiCoordinator(ptr);

  external int /* *const c_void */ share_opaque_FfiCoordinator(ptr);

  external dynamic /*  */ drop_opaque_FfiQrEncoder(ptr);

  external int /* *const c_void */ share_opaque_FfiQrEncoder(ptr);

  external dynamic /*  */ drop_opaque_FfiQrReader(ptr);

  external int /* *const c_void */ share_opaque_FfiQrReader(ptr);

  external dynamic /*  */
      drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(ptr);

  external int /* *const c_void */
      share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(ptr);

  external dynamic /*  */
      drop_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey(ptr);

  external int /* *const c_void */
      share_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey(ptr);

  external dynamic /*  */ drop_opaque_HashMapRBitcoinNetworkChainClient(ptr);

  external int /* *const c_void */
      share_opaque_HashMapRBitcoinNetworkChainClient(ptr);

  external dynamic /*  */ drop_opaque_MaybeSinkDeveloperSettings(ptr);

  external int /* *const c_void */ share_opaque_MaybeSinkDeveloperSettings(ptr);

  external dynamic /*  */ drop_opaque_MaybeSinkElectrumSettings(ptr);

  external int /* *const c_void */ share_opaque_MaybeSinkElectrumSettings(ptr);

  external dynamic /*  */ drop_opaque_MaybeSinkWalletSettings(ptr);

  external int /* *const c_void */ share_opaque_MaybeSinkWalletSettings(ptr);

  external dynamic /*  */ drop_opaque_MutexHashMapRBitcoinNetworkWallet(ptr);

  external int /* *const c_void */
      share_opaque_MutexHashMapRBitcoinNetworkWallet(ptr);

  external dynamic /*  */ drop_opaque_MutexPersistedRSettings(ptr);

  external int /* *const c_void */ share_opaque_MutexPersistedRSettings(ptr);

  external dynamic /*  */ drop_opaque_PathBuf(ptr);

  external int /* *const c_void */ share_opaque_PathBuf(ptr);

  external dynamic /*  */ drop_opaque_PortBytesToReadSender(ptr);

  external int /* *const c_void */ share_opaque_PortBytesToReadSender(ptr);

  external dynamic /*  */ drop_opaque_PortOpenSender(ptr);

  external int /* *const c_void */ share_opaque_PortOpenSender(ptr);

  external dynamic /*  */ drop_opaque_PortReadSender(ptr);

  external int /* *const c_void */ share_opaque_PortReadSender(ptr);

  external dynamic /*  */ drop_opaque_PortWriteSender(ptr);

  external int /* *const c_void */ share_opaque_PortWriteSender(ptr);

  external dynamic /*  */ drop_opaque_RBitcoinNetwork(ptr);

  external int /* *const c_void */ share_opaque_RBitcoinNetwork(ptr);

  external dynamic /*  */ drop_opaque_RTransaction(ptr);

  external int /* *const c_void */ share_opaque_RTransaction(ptr);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_sub_port_events(NativePortType port_) =>
      wasmModule.wire_sub_port_events(port_);

  void wire_sub_device_events(NativePortType port_) =>
      wasmModule.wire_sub_device_events(port_);

  dynamic /* void */ wire_log(int level, String message) =>
      wasmModule.wire_log(level, message);

  void wire_turn_stderr_logging_on(NativePortType port_, int level) =>
      wasmModule.wire_turn_stderr_logging_on(port_, level);

  void wire_turn_logcat_logging_on(NativePortType port_, int level) =>
      wasmModule.wire_turn_logcat_logging_on(port_, level);

  dynamic /* List<dynamic>? */ wire_device_at_index(int index) =>
      wasmModule.wire_device_at_index(index);

  dynamic /* List<dynamic> */ wire_device_list_state() =>
      wasmModule.wire_device_list_state();

  dynamic /* List<dynamic>? */ wire_get_connected_device(List<dynamic> id) =>
      wasmModule.wire_get_connected_device(id);

  void wire_load(NativePortType port_, String app_dir) =>
      wasmModule.wire_load(port_, app_dir);

  void wire_load_host_handles_serial(NativePortType port_, String app_dir) =>
      wasmModule.wire_load_host_handles_serial(port_, app_dir);

  void wire_echo_key_id(NativePortType port_, List<dynamic> key_id) =>
      wasmModule.wire_echo_key_id(port_, key_id);

  dynamic /* List<dynamic> */ wire_psbt_bytes_to_psbt(Uint8List psbt_bytes) =>
      wasmModule.wire_psbt_bytes_to_psbt(psbt_bytes);

  void wire_new_qr_reader(NativePortType port_) =>
      wasmModule.wire_new_qr_reader(port_);

  void wire_new_qr_encoder(NativePortType port_, Uint8List bytes) =>
      wasmModule.wire_new_qr_encoder(port_, bytes);

  dynamic /* String */ wire_txid__method__Transaction(List<dynamic> that) =>
      wasmModule.wire_txid__method__Transaction(that);

  dynamic /* bool */ wire_ready__method__ConnectedDevice(List<dynamic> that) =>
      wasmModule.wire_ready__method__ConnectedDevice(that);

  dynamic /* bool */ wire_needs_firmware_upgrade__method__ConnectedDevice(
          List<dynamic> that) =>
      wasmModule.wire_needs_firmware_upgrade__method__ConnectedDevice(that);

  dynamic /* int */ wire_threshold__method__FrostKey(List<dynamic> that) =>
      wasmModule.wire_threshold__method__FrostKey(that);

  dynamic /* List<dynamic> */ wire_id__method__FrostKey(List<dynamic> that) =>
      wasmModule.wire_id__method__FrostKey(that);

  dynamic /* String */ wire_key_name__method__FrostKey(List<dynamic> that) =>
      wasmModule.wire_key_name__method__FrostKey(that);

  dynamic /* List<dynamic> */ wire_devices__method__FrostKey(
          List<dynamic> that) =>
      wasmModule.wire_devices__method__FrostKey(that);

  dynamic /* Uint8List */ wire_polynomial_identifier__method__FrostKey(
          List<dynamic> that) =>
      wasmModule.wire_polynomial_identifier__method__FrostKey(that);

  void wire_satisfy__method__PortOpen(
          NativePortType port_, List<dynamic> that, String? err) =>
      wasmModule.wire_satisfy__method__PortOpen(port_, that, err);

  void wire_satisfy__method__PortRead(NativePortType port_, List<dynamic> that,
          Uint8List bytes, String? err) =>
      wasmModule.wire_satisfy__method__PortRead(port_, that, bytes, err);

  void wire_satisfy__method__PortWrite(
          NativePortType port_, List<dynamic> that, String? err) =>
      wasmModule.wire_satisfy__method__PortWrite(port_, that, err);

  void wire_satisfy__method__PortBytesToRead(
          NativePortType port_, List<dynamic> that, int bytes_to_read) =>
      wasmModule.wire_satisfy__method__PortBytesToRead(
          port_, that, bytes_to_read);

  dynamic /* List<dynamic>? */ wire_get_device__method__DeviceListState(
          List<dynamic> that, List<dynamic> id) =>
      wasmModule.wire_get_device__method__DeviceListState(that, id);

  void wire_sub_tx_state__method__Wallet(
          NativePortType port_, List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_sub_tx_state__method__Wallet(port_, that, key_id);

  dynamic /* List<dynamic> */ wire_tx_state__method__Wallet(
          List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_tx_state__method__Wallet(that, key_id);

  void wire_sync_txids__method__Wallet(NativePortType port_, List<dynamic> that,
          List<dynamic> key_id, List<String> txids) =>
      wasmModule.wire_sync_txids__method__Wallet(port_, that, key_id, txids);

  void wire_sync__method__Wallet(
          NativePortType port_, List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_sync__method__Wallet(port_, that, key_id);

  void wire_next_address__method__Wallet(
          NativePortType port_, List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_next_address__method__Wallet(port_, that, key_id);

  dynamic /* List<dynamic> */ wire_addresses_state__method__Wallet(
          List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_addresses_state__method__Wallet(that, key_id);

  void wire_send_to__method__Wallet(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> key_id,
          String to_address,
          Object value,
          double feerate) =>
      wasmModule.wire_send_to__method__Wallet(
          port_, that, key_id, to_address, value, feerate);

  void wire_broadcast_tx__method__Wallet(NativePortType port_,
          List<dynamic> that, List<dynamic> key_id, List<dynamic> tx) =>
      wasmModule.wire_broadcast_tx__method__Wallet(port_, that, key_id, tx);

  dynamic /* List<dynamic> */ wire_psbt_to_unsigned_tx__method__Wallet(
          List<dynamic> that, List<dynamic> psbt, List<dynamic> key_id) =>
      wasmModule.wire_psbt_to_unsigned_tx__method__Wallet(that, psbt, key_id);

  dynamic /* List<dynamic> */ wire_signet__static_method__BitcoinNetwork() =>
      wasmModule.wire_signet__static_method__BitcoinNetwork();

  dynamic /* List<dynamic> */ wire_mainnet__static_method__BitcoinNetwork() =>
      wasmModule.wire_mainnet__static_method__BitcoinNetwork();

  dynamic /* List<dynamic>? */ wire_from_string__static_method__BitcoinNetwork(
          String string) =>
      wasmModule.wire_from_string__static_method__BitcoinNetwork(string);

  dynamic /* List<dynamic> */
      wire_supported_networks__static_method__BitcoinNetwork() =>
          wasmModule.wire_supported_networks__static_method__BitcoinNetwork();

  dynamic /* String */ wire_name__method__BitcoinNetwork(List<dynamic> that) =>
      wasmModule.wire_name__method__BitcoinNetwork(that);

  dynamic /* bool */ wire_is_mainnet__method__BitcoinNetwork(
          List<dynamic> that) =>
      wasmModule.wire_is_mainnet__method__BitcoinNetwork(that);

  dynamic /* String */ wire_descriptor_for_key__method__BitcoinNetwork(
          List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_descriptor_for_key__method__BitcoinNetwork(that, key_id);

  dynamic /* String? */ wire_validate_amount__method__BitcoinNetwork(
          List<dynamic> that, String address, Object value) =>
      wasmModule.wire_validate_amount__method__BitcoinNetwork(
          that, address, value);

  dynamic /* String? */
      wire_validate_destination_address__method__BitcoinNetwork(
              List<dynamic> that, String address) =>
          wasmModule.wire_validate_destination_address__method__BitcoinNetwork(
              that, address);

  dynamic /* String */ wire_default_electrum_server__method__BitcoinNetwork(
          List<dynamic> that) =>
      wasmModule.wire_default_electrum_server__method__BitcoinNetwork(that);

  void wire_set_available_ports__method__FfiSerial(
          NativePortType port_, List<dynamic> that, List<dynamic> ports) =>
      wasmModule.wire_set_available_ports__method__FfiSerial(
          port_, that, ports);

  void wire_start_thread__method__Coordinator(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_start_thread__method__Coordinator(port_, that);

  void wire_update_name_preview__method__Coordinator(NativePortType port_,
          List<dynamic> that, List<dynamic> id, String name) =>
      wasmModule.wire_update_name_preview__method__Coordinator(
          port_, that, id, name);

  void wire_finish_naming__method__Coordinator(NativePortType port_,
          List<dynamic> that, List<dynamic> id, String name) =>
      wasmModule.wire_finish_naming__method__Coordinator(port_, that, id, name);

  void wire_send_cancel__method__Coordinator(
          NativePortType port_, List<dynamic> that, List<dynamic> id) =>
      wasmModule.wire_send_cancel__method__Coordinator(port_, that, id);

  void wire_display_backup__method__Coordinator(NativePortType port_,
          List<dynamic> that, List<dynamic> id, List<dynamic> key_id) =>
      wasmModule.wire_display_backup__method__Coordinator(
          port_, that, id, key_id);

  dynamic /* List<dynamic> */ wire_key_state__method__Coordinator(
          List<dynamic> that) =>
      wasmModule.wire_key_state__method__Coordinator(that);

  void wire_sub_key_events__method__Coordinator(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_sub_key_events__method__Coordinator(port_, that);

  dynamic /* List<dynamic>? */ wire_get_key__method__Coordinator(
          List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_get_key__method__Coordinator(that, key_id);

  dynamic /* String? */ wire_get_key_name__method__Coordinator(
          List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_get_key_name__method__Coordinator(that, key_id);

  dynamic /* List<dynamic> */ wire_keys_for_device__method__Coordinator(
          List<dynamic> that, List<dynamic> device_id) =>
      wasmModule.wire_keys_for_device__method__Coordinator(that, device_id);

  void wire_start_signing__method__Coordinator(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> key_id,
          List<dynamic> devices,
          String message) =>
      wasmModule.wire_start_signing__method__Coordinator(
          port_, that, key_id, devices, message);

  void wire_start_signing_tx__method__Coordinator(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> key_id,
          List<dynamic> unsigned_tx,
          List<dynamic> devices) =>
      wasmModule.wire_start_signing_tx__method__Coordinator(
          port_, that, key_id, unsigned_tx, devices);

  dynamic /* int */ wire_nonces_available__method__Coordinator(
          List<dynamic> that, List<dynamic> id) =>
      wasmModule.wire_nonces_available__method__Coordinator(that, id);

  dynamic /* Object */ wire_current_nonce__method__Coordinator(
          List<dynamic> that, List<dynamic> id) =>
      wasmModule.wire_current_nonce__method__Coordinator(that, id);

  void wire_generate_new_key__method__Coordinator(
          NativePortType port_,
          List<dynamic> that,
          int threshold,
          List<dynamic> devices,
          String key_name) =>
      wasmModule.wire_generate_new_key__method__Coordinator(
          port_, that, threshold, devices, key_name);

  dynamic /* List<dynamic>? */
      wire_persisted_sign_session_description__method__Coordinator(
              List<dynamic> that, List<dynamic> key_id) =>
          wasmModule
              .wire_persisted_sign_session_description__method__Coordinator(
                  that, key_id);

  void wire_try_restore_signing_session__method__Coordinator(
          NativePortType port_, List<dynamic> that, List<dynamic> key_id) =>
      wasmModule.wire_try_restore_signing_session__method__Coordinator(
          port_, that, key_id);

  void wire_start_firmware_upgrade__method__Coordinator(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_start_firmware_upgrade__method__Coordinator(port_, that);

  dynamic /* String */ wire_upgrade_firmware_digest__method__Coordinator(
          List<dynamic> that) =>
      wasmModule.wire_upgrade_firmware_digest__method__Coordinator(that);

  void wire_cancel_protocol__method__Coordinator(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_cancel_protocol__method__Coordinator(port_, that);

  void wire_enter_firmware_upgrade_mode__method__Coordinator(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_enter_firmware_upgrade_mode__method__Coordinator(
          port_, that);

  dynamic /* String? */ wire_get_device_name__method__Coordinator(
          List<dynamic> that, List<dynamic> id) =>
      wasmModule.wire_get_device_name__method__Coordinator(that, id);

  void wire_final_keygen_ack__method__Coordinator(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_final_keygen_ack__method__Coordinator(port_, that);

  void wire_check_share_on_device__method__Coordinator(NativePortType port_,
          List<dynamic> that, List<dynamic> device_id, List<dynamic> key_id) =>
      wasmModule.wire_check_share_on_device__method__Coordinator(
          port_, that, device_id, key_id);

  dynamic /* List<dynamic> */ wire_effect__method__SignedTx(
          List<dynamic> that, List<dynamic> key_id, List<dynamic> network) =>
      wasmModule.wire_effect__method__SignedTx(that, key_id, network);

  void wire_attach_signatures_to_psbt__method__UnsignedTx(NativePortType port_,
          List<dynamic> that, List<dynamic> signatures, List<dynamic> psbt) =>
      wasmModule.wire_attach_signatures_to_psbt__method__UnsignedTx(
          port_, that, signatures, psbt);

  void wire_complete__method__UnsignedTx(
          NativePortType port_, List<dynamic> that, List<dynamic> signatures) =>
      wasmModule.wire_complete__method__UnsignedTx(port_, that, signatures);

  dynamic /* List<dynamic> */ wire_effect__method__UnsignedTx(
          List<dynamic> that, List<dynamic> key_id, List<dynamic> network) =>
      wasmModule.wire_effect__method__UnsignedTx(that, key_id, network);

  dynamic /* Uint8List */ wire_to_bytes__method__Psbt(List<dynamic> that) =>
      wasmModule.wire_to_bytes__method__Psbt(that);

  void wire_decode_from_bytes__method__QrReader(
          NativePortType port_, List<dynamic> that, Uint8List bytes) =>
      wasmModule.wire_decode_from_bytes__method__QrReader(port_, that, bytes);

  dynamic /* String */ wire_next__method__QrEncoder(List<dynamic> that) =>
      wasmModule.wire_next__method__QrEncoder(that);

  void wire_sub_developer_settings__method__Settings(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_sub_developer_settings__method__Settings(port_, that);

  void wire_sub_electrum_settings__method__Settings(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_sub_electrum_settings__method__Settings(port_, that);

  void wire_sub_wallet_settings__method__Settings(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_sub_wallet_settings__method__Settings(port_, that);

  void wire_load_wallet__method__Settings(
          NativePortType port_, List<dynamic> that, List<dynamic> network) =>
      wasmModule.wire_load_wallet__method__Settings(port_, that, network);

  void wire_set_wallet_network__method__Settings(NativePortType port_,
          List<dynamic> that, List<dynamic> key_id, List<dynamic> network) =>
      wasmModule.wire_set_wallet_network__method__Settings(
          port_, that, key_id, network);

  void wire_set_developer_mode__method__Settings(
          NativePortType port_, List<dynamic> that, bool value) =>
      wasmModule.wire_set_developer_mode__method__Settings(port_, that, value);

  void wire_check_and_set_electrum_server__method__Settings(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> network,
          String url) =>
      wasmModule.wire_check_and_set_electrum_server__method__Settings(
          port_, that, network, url);

  void wire_subscribe_chain_status__method__Settings(
          NativePortType port_, List<dynamic> that, List<dynamic> network) =>
      wasmModule.wire_subscribe_chain_status__method__Settings(
          port_, that, network);

  dynamic /*  */ drop_opaque_ArcMutexFrostsnapWallet(ptr) =>
      wasmModule.drop_opaque_ArcMutexFrostsnapWallet(ptr);

  int /* *const c_void */ share_opaque_ArcMutexFrostsnapWallet(ptr) =>
      wasmModule.share_opaque_ArcMutexFrostsnapWallet(ptr);

  dynamic /*  */ drop_opaque_ArcMutexRusqliteConnection(ptr) =>
      wasmModule.drop_opaque_ArcMutexRusqliteConnection(ptr);

  int /* *const c_void */ share_opaque_ArcMutexRusqliteConnection(ptr) =>
      wasmModule.share_opaque_ArcMutexRusqliteConnection(ptr);

  dynamic /*  */ drop_opaque_ArcMutexVecPortDesc(ptr) =>
      wasmModule.drop_opaque_ArcMutexVecPortDesc(ptr);

  int /* *const c_void */ share_opaque_ArcMutexVecPortDesc(ptr) =>
      wasmModule.share_opaque_ArcMutexVecPortDesc(ptr);

  dynamic /*  */ drop_opaque_ArcRTransaction(ptr) =>
      wasmModule.drop_opaque_ArcRTransaction(ptr);

  int /* *const c_void */ share_opaque_ArcRTransaction(ptr) =>
      wasmModule.share_opaque_ArcRTransaction(ptr);

  dynamic /*  */ drop_opaque_ArcWalletStreams(ptr) =>
      wasmModule.drop_opaque_ArcWalletStreams(ptr);

  int /* *const c_void */ share_opaque_ArcWalletStreams(ptr) =>
      wasmModule.share_opaque_ArcWalletStreams(ptr);

  dynamic /*  */ drop_opaque_BitcoinPsbt(ptr) =>
      wasmModule.drop_opaque_BitcoinPsbt(ptr);

  int /* *const c_void */ share_opaque_BitcoinPsbt(ptr) =>
      wasmModule.share_opaque_BitcoinPsbt(ptr);

  dynamic /*  */ drop_opaque_ChainClient(ptr) =>
      wasmModule.drop_opaque_ChainClient(ptr);

  int /* *const c_void */ share_opaque_ChainClient(ptr) =>
      wasmModule.share_opaque_ChainClient(ptr);

  dynamic /*  */ drop_opaque_FfiCoordinator(ptr) =>
      wasmModule.drop_opaque_FfiCoordinator(ptr);

  int /* *const c_void */ share_opaque_FfiCoordinator(ptr) =>
      wasmModule.share_opaque_FfiCoordinator(ptr);

  dynamic /*  */ drop_opaque_FfiQrEncoder(ptr) =>
      wasmModule.drop_opaque_FfiQrEncoder(ptr);

  int /* *const c_void */ share_opaque_FfiQrEncoder(ptr) =>
      wasmModule.share_opaque_FfiQrEncoder(ptr);

  dynamic /*  */ drop_opaque_FfiQrReader(ptr) =>
      wasmModule.drop_opaque_FfiQrReader(ptr);

  int /* *const c_void */ share_opaque_FfiQrReader(ptr) =>
      wasmModule.share_opaque_FfiQrReader(ptr);

  dynamic /*  */ drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(
          ptr) =>
      wasmModule
          .drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(ptr);

  int /* *const c_void */
      share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(ptr) =>
          wasmModule
              .share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(
                  ptr);

  dynamic /*  */ drop_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey(ptr) =>
      wasmModule.drop_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey(ptr);

  int /* *const c_void */
      share_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey(ptr) =>
          wasmModule
              .share_opaque_FrostsnapCoreCoordinatorCoordinatorFrostKey(ptr);

  dynamic /*  */ drop_opaque_HashMapRBitcoinNetworkChainClient(ptr) =>
      wasmModule.drop_opaque_HashMapRBitcoinNetworkChainClient(ptr);

  int /* *const c_void */ share_opaque_HashMapRBitcoinNetworkChainClient(ptr) =>
      wasmModule.share_opaque_HashMapRBitcoinNetworkChainClient(ptr);

  dynamic /*  */ drop_opaque_MaybeSinkDeveloperSettings(ptr) =>
      wasmModule.drop_opaque_MaybeSinkDeveloperSettings(ptr);

  int /* *const c_void */ share_opaque_MaybeSinkDeveloperSettings(ptr) =>
      wasmModule.share_opaque_MaybeSinkDeveloperSettings(ptr);

  dynamic /*  */ drop_opaque_MaybeSinkElectrumSettings(ptr) =>
      wasmModule.drop_opaque_MaybeSinkElectrumSettings(ptr);

  int /* *const c_void */ share_opaque_MaybeSinkElectrumSettings(ptr) =>
      wasmModule.share_opaque_MaybeSinkElectrumSettings(ptr);

  dynamic /*  */ drop_opaque_MaybeSinkWalletSettings(ptr) =>
      wasmModule.drop_opaque_MaybeSinkWalletSettings(ptr);

  int /* *const c_void */ share_opaque_MaybeSinkWalletSettings(ptr) =>
      wasmModule.share_opaque_MaybeSinkWalletSettings(ptr);

  dynamic /*  */ drop_opaque_MutexHashMapRBitcoinNetworkWallet(ptr) =>
      wasmModule.drop_opaque_MutexHashMapRBitcoinNetworkWallet(ptr);

  int /* *const c_void */ share_opaque_MutexHashMapRBitcoinNetworkWallet(ptr) =>
      wasmModule.share_opaque_MutexHashMapRBitcoinNetworkWallet(ptr);

  dynamic /*  */ drop_opaque_MutexPersistedRSettings(ptr) =>
      wasmModule.drop_opaque_MutexPersistedRSettings(ptr);

  int /* *const c_void */ share_opaque_MutexPersistedRSettings(ptr) =>
      wasmModule.share_opaque_MutexPersistedRSettings(ptr);

  dynamic /*  */ drop_opaque_PathBuf(ptr) =>
      wasmModule.drop_opaque_PathBuf(ptr);

  int /* *const c_void */ share_opaque_PathBuf(ptr) =>
      wasmModule.share_opaque_PathBuf(ptr);

  dynamic /*  */ drop_opaque_PortBytesToReadSender(ptr) =>
      wasmModule.drop_opaque_PortBytesToReadSender(ptr);

  int /* *const c_void */ share_opaque_PortBytesToReadSender(ptr) =>
      wasmModule.share_opaque_PortBytesToReadSender(ptr);

  dynamic /*  */ drop_opaque_PortOpenSender(ptr) =>
      wasmModule.drop_opaque_PortOpenSender(ptr);

  int /* *const c_void */ share_opaque_PortOpenSender(ptr) =>
      wasmModule.share_opaque_PortOpenSender(ptr);

  dynamic /*  */ drop_opaque_PortReadSender(ptr) =>
      wasmModule.drop_opaque_PortReadSender(ptr);

  int /* *const c_void */ share_opaque_PortReadSender(ptr) =>
      wasmModule.share_opaque_PortReadSender(ptr);

  dynamic /*  */ drop_opaque_PortWriteSender(ptr) =>
      wasmModule.drop_opaque_PortWriteSender(ptr);

  int /* *const c_void */ share_opaque_PortWriteSender(ptr) =>
      wasmModule.share_opaque_PortWriteSender(ptr);

  dynamic /*  */ drop_opaque_RBitcoinNetwork(ptr) =>
      wasmModule.drop_opaque_RBitcoinNetwork(ptr);

  int /* *const c_void */ share_opaque_RBitcoinNetwork(ptr) =>
      wasmModule.share_opaque_RBitcoinNetwork(ptr);

  dynamic /*  */ drop_opaque_RTransaction(ptr) =>
      wasmModule.drop_opaque_RTransaction(ptr);

  int /* *const c_void */ share_opaque_RTransaction(ptr) =>
      wasmModule.share_opaque_RTransaction(ptr);
}
